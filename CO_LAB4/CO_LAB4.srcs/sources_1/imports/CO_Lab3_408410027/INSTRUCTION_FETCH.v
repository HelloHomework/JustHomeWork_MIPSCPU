module INSTRUCTION_FETCH(
	clk,
	rst,
	jump,
	branch,
	jump_addr,
	branch_addr,

	PC,
	IR
);

input clk, rst, jump, branch;
input [31:0] jump_addr, branch_addr;

output reg 	[31:0] PC;
output reg 	[31:0] IR;

reg [31:0] instruction [255:0];
//output instruction
always @(posedge clk or posedge rst)
begin
	if(rst) begin
		IR <= 32'd0;
instruction[0] = 32'b00000000010100111100100000101010;
instruction[1] = 32'b00000000000101000100100000100000;
instruction[2] = 32'b00000000000100010101000000100000;
instruction[3] = 32'b000000_00000_00000_00000_00000_100000;
instruction[4] = 32'b00010111001000000000000001011000;
instruction[5] = 32'b00000000010100000110100000100100;
instruction[6] = 32'b000000_00000_00000_00000_00000_100000;
instruction[7] = 32'b000000_00000_00000_00000_00000_100000;
instruction[8] = 32'b000000_00000_00000_00000_00000_100000;
instruction[9] = 32'b00010101101000000000000000001001;
instruction[10] = 32'b000000_00000_00000_00000_00000_100000;
instruction[11] = 32'b000000_00000_00000_00000_00000_100000;
instruction[12] = 32'b000000_00000_00000_00000_00000_100000;
instruction[13] = 32'b00000000010100000101100000100010;
instruction[14] = 32'b00000000010100000110000000100000;
instruction[15] = 32'b00010001101000000000000000000111;
instruction[16] = 32'b000000_00000_00000_00000_00000_100000;
instruction[17] = 32'b000000_00000_00000_00000_00000_100000;
instruction[18] = 32'b000000_00000_00000_00000_00000_100000;
instruction[19] = 32'b00000000010100010101100000100010;
instruction[20] = 32'b00000000010100010110000000100000;
instruction[21] = 32'b000000_00000_00000_00000_00000_100000;
instruction[22] = 32'b000000_00000_00000_00000_00000_100000;
instruction[23] = 32'b00000000000010110110100000100101;
instruction[24] = 32'b00000000000100100111000000100000;
instruction[25] = 32'b000000_00000_00000_00000_00000_100000;
instruction[26] = 32'b000000_00000_00000_00000_00000_100000;
instruction[27] = 32'b00000000000010110110100000100101;
instruction[28] = 32'b000000_00000_00000_00000_00000_100000;
instruction[29] = 32'b000000_00000_00000_00000_00000_100000;
instruction[30] = 32'b000000_00000_00000_00000_00000_100000;
instruction[31] = 32'b00000001101011100110100000100010;
instruction[32] = 32'b000000_00000_00000_00000_00000_100000;
instruction[33] = 32'b000000_00000_00000_00000_00000_100000;
instruction[34] = 32'b000000_00000_00000_00000_00000_100000;
instruction[35] = 32'b00000001101011101100100000101010;
instruction[36] = 32'b000000_00000_00000_00000_00000_100000;
instruction[37] = 32'b000000_00000_00000_00000_00000_100000;
instruction[38] = 32'b000000_00000_00000_00000_00000_100000;
instruction[39] = 32'b00010011001000001111111111110111;
instruction[40] = 32'b000000_00000_00000_00000_00000_100000;
instruction[41] = 32'b000000_00000_00000_00000_00000_100000;
instruction[42] = 32'b000000_00000_00000_00000_00000_100000;
instruction[43] = 32'b00010001011011100000000000001101;
instruction[44] = 32'b000000_00000_00000_00000_00000_100000;
instruction[45] = 32'b000000_00000_00000_00000_00000_100000;
instruction[46] = 32'b000000_00000_00000_00000_00000_100000;
instruction[47] = 32'b00000001110100010111000000100000;
instruction[48] = 32'b00010101101000001111111111101010;
instruction[49] = 32'b000000_00000_00000_00000_00000_100000;
instruction[50] = 32'b000000_00000_00000_00000_00000_100000;
instruction[51] = 32'b000000_00000_00000_00000_00000_100000;
instruction[52] = 32'b00000001011100010101100000100010;
instruction[53] = 32'b00010001101000001111111111100010;
instruction[54] = 32'b000000_00000_00000_00000_00000_100000;
instruction[55] = 32'b000000_00000_00000_00000_00000_100000;
instruction[56] = 32'b000000_00000_00000_00000_00000_100000;
instruction[57] = 32'b00000000000010110101000000100101;
instruction[58] = 32'b00000000000011000110100000100101;
instruction[59] = 32'b00000000000100100111000000100000;
instruction[60] = 32'b000000_00000_00000_00000_00000_100000;
instruction[61] = 32'b000000_00000_00000_00000_00000_100000;
instruction[62] = 32'b00000000000011000110100000100101;
instruction[63] = 32'b000000_00000_00000_00000_00000_100000;
instruction[64] = 32'b000000_00000_00000_00000_00000_100000;
instruction[65] = 32'b000000_00000_00000_00000_00000_100000;
instruction[66] = 32'b00000001101011100110100000100010;
instruction[67] = 32'b000000_00000_00000_00000_00000_100000;
instruction[68] = 32'b000000_00000_00000_00000_00000_100000;
instruction[69] = 32'b000000_00000_00000_00000_00000_100000;
instruction[70] = 32'b00000001101011101100100000101010;
instruction[71] = 32'b000000_00000_00000_00000_00000_100000;
instruction[72] = 32'b000000_00000_00000_00000_00000_100000;
instruction[73] = 32'b000000_00000_00000_00000_00000_100000;
instruction[74] = 32'b00010011001000001111111111110111;
instruction[75] = 32'b000000_00000_00000_00000_00000_100000;
instruction[76] = 32'b000000_00000_00000_00000_00000_100000;
instruction[77] = 32'b000000_00000_00000_00000_00000_100000;
instruction[78] = 32'b00010001100011100000000000001101;
instruction[79] = 32'b000000_00000_00000_00000_00000_100000;
instruction[80] = 32'b000000_00000_00000_00000_00000_100000;
instruction[81] = 32'b000000_00000_00000_00000_00000_100000;
instruction[82] = 32'b00000001110100010111000000100000;
instruction[83] = 32'b00010101101000001111111111101010;
instruction[84] = 32'b000000_00000_00000_00000_00000_100000;
instruction[85] = 32'b000000_00000_00000_00000_00000_100000;
instruction[86] = 32'b000000_00000_00000_00000_00000_100000;
instruction[87] = 32'b00000001100100010110000000100000;
instruction[88] = 32'b00010001101000001111111111100010;
instruction[89] = 32'b000000_00000_00000_00000_00000_100000;
instruction[90] = 32'b000000_00000_00000_00000_00000_100000;
instruction[91] = 32'b000000_00000_00000_00000_00000_100000;
instruction[92] = 32'b00000000000011000100100000100101;
instruction[93] = 32'b000000_00000_00000_00000_00000_100000;
instruction[94] = 32'b000000_00000_00000_00000_00000_100000;
instruction[95] = 32'b000000_00000_00000_00000_00000_100000;
	// end
end
	else begin
		if (PC[10:2]<=8'd140) begin
			IR <= instruction[PC[10:2]]; //(0, 4, 8, ...) => (0, 1, 2, ...)
		end
	end
end

// output program counter
always @(posedge clk or posedge rst)
begin
	if(rst)
		PC <= 32'd0;
	else begin
		if (PC[10:2]<=8'd140) begin
			PC <= (branch) ? branch_addr : ( (jump) ? jump_addr : (PC+4)) ;
		end
	end
end

endmodule